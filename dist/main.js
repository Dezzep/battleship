(()=>{"use strict";var e={99:(e,r,a)=>{a.d(r,{Z:()=>i});var n=a(537),t=a.n(n),o=a(645),s=a.n(o)()(t());s.push([e.id,"body{background-color:#3f3f3f}#players-game-board{display:grid;grid-template-rows:1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr;width:50em;height:50em}#players-game-board .numbers{display:flex;justify-content:space-around;align-items:center}#players-game-board .letters,#players-game-board .A,#players-game-board .B,#players-game-board .C,#players-game-board .D,#players-game-board .E,#players-game-board .F,#players-game-board .G,#players-game-board .H,#players-game-board .I,#players-game-board .J{background-color:rgba(47,70,202,.489);display:grid;grid-template-columns:1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr}#players-game-board .letters div,#players-game-board .A div,#players-game-board .B div,#players-game-board .C div,#players-game-board .D div,#players-game-board .E div,#players-game-board .F div,#players-game-board .G div,#players-game-board .H div,#players-game-board .I div,#players-game-board .J div{border:1px solid #000}#players-game-board .letters div:hover,#players-game-board .A div:hover,#players-game-board .B div:hover,#players-game-board .C div:hover,#players-game-board .D div:hover,#players-game-board .E div:hover,#players-game-board .F div:hover,#players-game-board .G div:hover,#players-game-board .H div:hover,#players-game-board .I div:hover,#players-game-board .J div:hover{background-color:rgba(46,69,201,.35)}","",{version:3,sources:["webpack://./src/styles.scss"],names:[],mappings:"AAAA,KACE,wBAAA,CAGF,oBACE,YAAA,CACA,8DAAA,CACA,UAAA,CACA,WAAA,CAEA,6BACE,YAAA,CACA,4BAAA,CACA,kBAAA,CAGF,mQAWE,qCAAA,CACA,YAAA,CACA,iEAAA,CACA,+SACE,qBAAA,CAEA,iXACE,oCAAA",sourcesContent:["body{\n  background-color: #3f3f3f;\n}\n\n#players-game-board{\n  display:grid;\n  grid-template-rows:  1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr;\n  width:50em;\n  height:50em;\n  \n  .numbers{\n    display:flex;\n    justify-content: space-around;\n    align-items: center;\n  }\n\n  .letters,\n  .A, \n  .B,\n  .C,\n  .D,\n  .E,\n  .F,\n  .G,\n  .H,\n  .I,\n  .J{\n    background-color: rgba(47, 70, 202, 0.489);\n    display:grid;\n    grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr;\n    div {\n      border:1px solid black;\n\n      &:hover{\n        background-color: rgba(46, 69, 201, 0.350);\n      }\n    }\n  }\n}\n\n"],sourceRoot:""}]);const i=s},645:e=>{e.exports=function(e){var r=[];return r.toString=function(){return this.map((function(r){var a="",n=void 0!==r[5];return r[4]&&(a+="@supports (".concat(r[4],") {")),r[2]&&(a+="@media ".concat(r[2]," {")),n&&(a+="@layer".concat(r[5].length>0?" ".concat(r[5]):""," {")),a+=e(r),n&&(a+="}"),r[2]&&(a+="}"),r[4]&&(a+="}"),a})).join("")},r.i=function(e,a,n,t,o){"string"==typeof e&&(e=[[null,e,void 0]]);var s={};if(n)for(var i=0;i<this.length;i++){var d=this[i][0];null!=d&&(s[d]=!0)}for(var c=0;c<e.length;c++){var l=[].concat(e[c]);n&&s[l[0]]||(void 0!==o&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=o),a&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=a):l[2]=a),t&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=t):l[4]="".concat(t)),r.push(l))}},r}},537:e=>{e.exports=function(e){var r=e[1],a=e[3];if(!a)return r;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),t="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),o="/*# ".concat(t," */"),s=a.sources.map((function(e){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(e," */")}));return[r].concat(s).concat([o]).join("\n")}return[r].join("\n")}},379:e=>{var r=[];function a(e){for(var a=-1,n=0;n<r.length;n++)if(r[n].identifier===e){a=n;break}return a}function n(e,n){for(var o={},s=[],i=0;i<e.length;i++){var d=e[i],c=n.base?d[0]+n.base:d[0],l=o[c]||0,p="".concat(c," ").concat(l);o[c]=l+1;var u=a(p),f={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==u)r[u].references++,r[u].updater(f);else{var m=t(f,n);n.byIndex=i,r.splice(i,0,{identifier:p,updater:m,references:1})}s.push(p)}return s}function t(e,r){var a=r.domAPI(r);return a.update(e),function(r){if(r){if(r.css===e.css&&r.media===e.media&&r.sourceMap===e.sourceMap&&r.supports===e.supports&&r.layer===e.layer)return;a.update(e=r)}else a.remove()}}e.exports=function(e,t){var o=n(e=e||[],t=t||{});return function(e){e=e||[];for(var s=0;s<o.length;s++){var i=a(o[s]);r[i].references--}for(var d=n(e,t),c=0;c<o.length;c++){var l=a(o[c]);0===r[l].references&&(r[l].updater(),r.splice(l,1))}o=d}}},569:e=>{var r={};e.exports=function(e,a){var n=function(e){if(void 0===r[e]){var a=document.querySelector(e);if(window.HTMLIFrameElement&&a instanceof window.HTMLIFrameElement)try{a=a.contentDocument.head}catch(e){a=null}r[e]=a}return r[e]}(e);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(a)}},216:e=>{e.exports=function(e){var r=document.createElement("style");return e.setAttributes(r,e.attributes),e.insert(r,e.options),r}},565:(e,r,a)=>{e.exports=function(e){var r=a.nc;r&&e.setAttribute("nonce",r)}},795:e=>{e.exports=function(e){var r=e.insertStyleElement(e);return{update:function(a){!function(e,r,a){var n="";a.supports&&(n+="@supports (".concat(a.supports,") {")),a.media&&(n+="@media ".concat(a.media," {"));var t=void 0!==a.layer;t&&(n+="@layer".concat(a.layer.length>0?" ".concat(a.layer):""," {")),n+=a.css,t&&(n+="}"),a.media&&(n+="}"),a.supports&&(n+="}");var o=a.sourceMap;o&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),r.styleTagTransform(n,e,r.options)}(r,e,a)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(r)}}}},589:e=>{e.exports=function(e,r){if(r.styleSheet)r.styleSheet.cssText=e;else{for(;r.firstChild;)r.removeChild(r.firstChild);r.appendChild(document.createTextNode(e))}}}},r={};function a(n){var t=r[n];if(void 0!==t)return t.exports;var o=r[n]={id:n,exports:{}};return e[n](o,o.exports,a),o.exports}a.n=e=>{var r=e&&e.__esModule?()=>e.default:()=>e;return a.d(r,{a:r}),r},a.d=(e,r)=>{for(var n in r)a.o(r,n)&&!a.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:r[n]})},a.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r),a.nc=void 0,(()=>{var e=a(379),r=a.n(e),n=a(795),t=a.n(n),o=a(569),s=a.n(o),i=a(565),d=a.n(i),c=a(216),l=a.n(c),p=a(589),u=a.n(p),f=a(99),m={};m.styleTagTransform=u(),m.setAttributes=d(),m.insert=s().bind(null,"head"),m.domAPI=t(),m.insertStyleElement=l(),r()(f.Z,m),f.Z&&f.Z.locals&&f.Z.locals;let b=0;function h(e,r){const a=e,n={damage:[],defeated:!1,gameBoardPosition:[]},t=[],o=(e,r)=>{e.length===r&&(n.defeated=!0)};return{possibleHits:(()=>{for(let e=0;e<a;e+=1)t.push(r+e);return t})(),hit:e=>{n.damage.includes(e)||n.damage.push(e),o(n.damage,a)},isSunk:o,shipLength:a,shipsDamage:n,name:r}}function g(){const e=h(5,"carrier"),r=h(4,"battleship"),a=h(3,"submarine"),n=h(3,"cruiser"),t=h(2,"destroyer"),o=[],s=[e,r,a,n,t],i={A:[],B:[],C:[],D:[],E:[],F:[],G:[],H:[],I:[],J:[]};return Object.values(i).forEach((e=>{for(let r=0;r<10;r+=1)e.push(r+1)})),{hitsAndMisses:o,table:i,addShipToTable:(e,r,a)=>{const n=e.shipLength;if(a+e.shipLength>10)return 1;for(let e=a;e<a+n;e+=1)if(r[e].length>1)return 1;return((e,r,a)=>{for(let n=0;n<e.possibleHits.length;n+=1)r[a+n]=`${e.name}${n}`})(e,r,a),0},shipPieces:s,receiveAttack:(e,r)=>{let a,n=e[r];if(e===i.A?a=`A${r}`:e===i.B?a=`B${r}`:e===i.C?a=`C${r}`:e===i.D?a=`D${r}`:e===i.E?a=`E${r}`:e===i.F?a=`F${r}`:e===i.G?a=`G${r}`:e===i.H?a=`H${r}`:e===i.I?a=`I${r}`:e===i.J&&(a=`J${r}`),o.includes(a))return 1;if(o.push(a),e[r].length>1){let e="";return/\d/.test(n)&&(e=n.slice(-1),n=n.slice(0,-1)),(e=>{let r;return s.forEach((a=>a.name===e?(r=a,0):0)),r})(n).hit(e),"hit"}return"miss"}}}const v=g(),A=g();v.addShipToTable(v.shipPieces[0],v.table.A,2),v.addShipToTable(v.shipPieces[1],v.table.B,4),v.addShipToTable(v.shipPieces[2],v.table.C,4),v.addShipToTable(v.shipPieces[3],v.table.F,6),v.addShipToTable(v.shipPieces[4],v.table.I,7),A.addShipToTable(A.shipPieces[0],A.table.A,2),A.addShipToTable(A.shipPieces[1],A.table.B,4),A.addShipToTable(A.shipPieces[2],A.table.C,4),A.addShipToTable(A.shipPieces[3],A.table.F,6),A.addShipToTable(A.shipPieces[4],A.table.I,7),function(e,r){b>1&&(b=0);b+=1}(),console.log(v),console.log(A),(e=>{const r=document.createElement("div"),a=["numbers","A","B","C","D","E","F","G","H","I","J"];r.id="players-game-board",a.forEach(((e,n)=>{const t=document.createElement("div");t.className=`column ${e}`,r.append(t),a.forEach(((r,a)=>{const o=document.createElement("div");0===n&&(0!==a&&(o.innerText=a),o.className="numbers"),a-1==-1?(o.className="identify","numbers"!==e&&(o.innerText=e)):"numbers"!==o.className&&(o.className=a-1),t.append(o)}))})),document.body.append(r)})()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,